R1=MCPthreshold(R,lam)
}
if(shrink=="SCAD"){
R1=SCADthreshold(R,lam)
}
diag(R1)=0
s=colSums(abs(R1))
ind=order(s,decreasing=T)[1:dim]
R2=R1[ind,ind]
S2=t(R2*D)*D
return(S2)
}
metadata <- read.table("./data/testdata", header=TRUE, sep="\t")
new_df <- metadata[, -1, drop=FALSE]
BDregular(new_df)
# dmean <- function(A){
#   a = colMeans(A)
#   A = t(t(A) - a)
#   return(A)
# }
# # 标准化
# standard=function(A){
#   a=colMeans(A)
#   b=apply(A,2,sd)
#   B=t(t(A)-a)
#   B=t(t(B)/b)
#   return(B)
# }
# # 将两个矩阵合并为一个块对角矩阵
# blockdiag=function(A,B){
#   if(length(A)>1){
#     p1=dim(A)[2];p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1:p1,1:p1]=A
#     C[c((p1+1):(p1+p2)),c((p1+1):(p1+p2))]=B
#   }else{
#     p1=1;
#     p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1,1]=A
#     C[c(2:(1+p2)),c(2:(1+p2))]=B
#   }
#   return(C)
# }
# # SCAD的阈值函数
# dSCAD=function(a,lam,gamma=3.7){
#   a=abs(a)
#   z=a
#   z[a<lam]=lam
#   z[a>lam]=(gamma*lam-z[a>lam])/(gamma-1)
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# dMCP=function(a,lam,gamma=3){
#   a=abs(a)
#   z=lam-a/gamma
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# soft=function(a,b){
#   c=abs(a)-b
#   c[c<0]=0
#   c=c*sign(a)
#   return(c)
# }
# shrinking=function(A,eps){
#   d=eigen(A)$values
#   d1=min(d)
#   dp=max(d)
#   us=max(eps,(d1+dp)/2)
#   uf=sum((d-d1)^2)/sum(d-d1)
#   u=max(us,uf)
#   alpha=1-(eps-d1)/(u-d1)
#   B=alpha*as.matrix(A)+(1-alpha)*u*diag(ncol(A))
#   B=cov2cor(B)
#   S=list(est=B,alpha=alpha,u=u)
#   return(S)
# }
# SCADthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dSCAD(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
# MCPthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dMCP(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
#
#
sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericMatrix dmean(NumericMatrix A) {
NumericVector a = colMeans(A);
A = t(t(A) - a);
return A;
}
// [[Rcpp::export]]
NumericMatrix standard(NumericMatrix A) {
NumericVector a = colMeans(A);
NumericVector b = apply(A, 2, sd);
NumericMatrix B = t(t(A) - a);
B = t(t(B) / b);
return B;
}
// [[Rcpp::export]]
NumericMatrix blockdiag(NumericMatrix A, NumericMatrix B) {
int p1 = A.ncol();
int p2 = B.ncol();
NumericMatrix C(p1 + p2, p1 + p2);
C.diag() = 1;
C(Range(0, p1 - 1), Range(0, p1 - 1)) = A;
C(Range(p1, p1 + p2 - 1), Range(p1, p1 + p2 - 1)) = B;
return C;
}
// [[Rcpp::export]]
NumericVector dSCAD(NumericVector a, double lam, double gamma = 3.7) {
a = abs(a);
NumericVector z = a;
z[a < lam] = lam;
z[a > lam] = (gamma * lam - z[a > lam]) / (gamma - 1);
z[a > (gamma * lam)] = 0;
return z;
}
// [[Rcpp::export]]
NumericVector dMCP(NumericVector a, double lam, double gamma = 3) {
a = abs(a);
NumericVector z = lam - a / gamma;
z[a > (gamma * lam)] = 0;
return z;
}
// [[Rcpp::export]]
NumericVector soft(NumericVector a, double b) {
NumericVector c = abs(a) - b;
c[c < 0] = 0;
c = c * sign(a);
return c;
}
// [[Rcpp::export]]
List shrinking(NumericMatrix A, double eps) {
Eigen::Map<Eigen::MatrixXd> AA(as<Eigen::Map<Eigen::MatrixXd> >(A));
Eigen::SelfAdjointEigenSolver<Eigen::MatrixXd> es(AA);
Eigen::VectorXd d=es.eigenvalues();
double d1=d.minCoeff();
double dp=d.maxCoeff();
double us=std::max(eps,(d1+dp)/2);
double uf=(d.array()-d1).square().sum()/(d.array()-d1).sum();
double u=std::max(us,uf);
double alpha=1-(eps-d1)/(u-d1);
NumericMatrix B=A*alpha+(u*(1-alpha))*diag(ncol(A));
B=cov2cor(B);
List S=List::create(Named("est")=B,
Named("alpha")=alpha,
Named("u")=u);
return S;
}
// [[Rcpp::export]]
NumericMatrix SCADthreshold(NumericMatrix S,double lam,int k=3){
NumericVector a=as<NumericVector>(S);
NumericVector b=abs(a);
for(int i=0;i<k;i++){
NumericVector c=dSCAD(b,lam);
b=soft(b,c);
}
NumericVector d=sign(a)*b;
d.attr("dim")=S.attr("dim");
diag(d)=1;
List res=shrinking(d,eps=0.001);
NumericMatrix d2=res["est"];
d2=cov2cor(d2);
return d2;
}
// [[Rcpp::export]]
NumericMatrix MCPthreshold(NumericMatrix S,double lam,int k=3){
NumericVector a=as<NumericVector>(S);
NumericVector b=abs(a);
for(int i=0;i<k;i++){
NumericVector c=dMCP(b,lam);
b=soft(b,c);
}
NumericVector d=sign(a)*b;
d.attr("dim")=S.attr("dim");
diag(d)=1;
List res=shrinking(d,eps=0.001);
NumericMatrix d2=res["est"];
d2=cov2cor(d2);
return d2;
}
')
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
#
#
sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericMatrix dmean(NumericMatrix A) {
NumericVector a = colMeans(A);
A = t(t(A) - a);
return A;
}
// [[Rcpp::export]]
NumericMatrix standard(NumericMatrix A) {
NumericVector a = colMeans(A);
NumericVector b = apply(A, 2, sd);
NumericMatrix B = t(t(A) - a);
B = t(t(B) / b);
return B;
}
// [[Rcpp::export]]
NumericMatrix blockdiag(NumericMatrix A, NumericMatrix B) {
int p1 = A.ncol();
int p2 = B.ncol();
NumericMatrix C(p1 + p2, p1 + p2);
C.diag() = 1;
C(Range(0, p1 - 1), Range(0, p1 - 1)) = A;
C(Range(p1, p1 + p2 - 1), Range(p1, p1 + p2 - 1)) = B;
return C;
}
// [[Rcpp::export]]
NumericVector dSCAD(NumericVector a, double lam, double gamma = 3.7) {
a = abs(a);
NumericVector z = a;
z[a < lam] = lam;
z[a > lam] = (gamma * lam - z[a > lam]) / (gamma - 1);
z[a > (gamma * lam)] = 0;
return z;
}
// [[Rcpp::export]]
NumericVector dMCP(NumericVector a, double lam, double gamma = 3) {
a = abs(a);
NumericVector z = lam - a / gamma;
z[a > (gamma * lam)] = 0;
return z;
}
// [[Rcpp::export]]
NumericVector soft(NumericVector a, double b) {
NumericVector c = abs(a) - b;
c[c < 0] = 0;
c = c * sign(a);
return c;
}
// [[Rcpp::export]]
List shrinking(NumericMatrix A, double eps) {
Eigen::Map<Eigen::MatrixXd> AA(as<Eigen::Map<Eigen::MatrixXd> >(A));
Eigen::SelfAdjointEigenSolver<Eigen::MatrixXd> es(AA);
Eigen::VectorXd d=es.eigenvalues();
double d1=d.minCoeff();
double dp=d.maxCoeff();
double us=std::max(eps,(d1+dp)/2);
double uf=(d.array()-d1).square().sum()/(d.array()-d1).sum();
double u=std::max(us,uf);
double alpha=1-(eps-d1)/(u-d1);
NumericMatrix B=A*alpha+(u*(1-alpha))*diag(ncol(A));
B=cov2cor(B);
List S=List::create(Named("est")=B,
Named("alpha")=alpha,
Named("u")=u);
return S;
}
// [[Rcpp::export]]
NumericMatrix SCADthreshold(NumericMatrix S,double lam,int k=3){
NumericVector a=as<NumericVector>(S);
NumericVector b=abs(a);
for(int i=0;i<k;i++){
NumericVector c=dSCAD(b,lam);
b=soft(b,c);
}
NumericVector d=sign(a)*b;
d.attr("dim")=S.attr("dim");
diag(d)=1;
List res=shrinking(d,eps=0.001);
NumericMatrix d2=res["est"];
d2=cov2cor(d2);
return d2;
}
// [[Rcpp::export]]
NumericMatrix MCPthreshold(NumericMatrix S,double lam,int k=3){
NumericVector a=as<NumericVector>(S);
NumericVector b=abs(a);
for(int i=0;i<k;i++){
NumericVector c=dMCP(b,lam);
b=soft(b,c);
}
NumericVector d=sign(a)*b;
d.attr("dim")=S.attr("dim");
diag(d)=1;
List res=shrinking(d,eps=0.001);
NumericMatrix d2=res["est"];
d2=cov2cor(d2);
return d2;
}')
# dmean <- function(A){
#   a = colMeans(A)
#   A = t(t(A) - a)
#   return(A)
# }
# # 标准化
# standard=function(A){
#   a=colMeans(A)
#   b=apply(A,2,sd)
#   B=t(t(A)-a)
#   B=t(t(B)/b)
#   return(B)
# }
# # 将两个矩阵合并为一个块对角矩阵
# blockdiag=function(A,B){
#   if(length(A)>1){
#     p1=dim(A)[2];p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1:p1,1:p1]=A
#     C[c((p1+1):(p1+p2)),c((p1+1):(p1+p2))]=B
#   }else{
#     p1=1;
#     p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1,1]=A
#     C[c(2:(1+p2)),c(2:(1+p2))]=B
#   }
#   return(C)
# }
# # SCAD的阈值函数
# dSCAD=function(a,lam,gamma=3.7){
#   a=abs(a)
#   z=a
#   z[a<lam]=lam
#   z[a>lam]=(gamma*lam-z[a>lam])/(gamma-1)
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# dMCP=function(a,lam,gamma=3){
#   a=abs(a)
#   z=lam-a/gamma
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# soft=function(a,b){
#   c=abs(a)-b
#   c[c<0]=0
#   c=c*sign(a)
#   return(c)
# }
# shrinking=function(A,eps){
#   d=eigen(A)$values
#   d1=min(d)
#   dp=max(d)
#   us=max(eps,(d1+dp)/2)
#   uf=sum((d-d1)^2)/sum(d-d1)
#   u=max(us,uf)
#   alpha=1-(eps-d1)/(u-d1)
#   B=alpha*as.matrix(A)+(1-alpha)*u*diag(ncol(A))
#   B=cov2cor(B)
#   S=list(est=B,alpha=alpha,u=u)
#   return(S)
# }
# SCADthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dSCAD(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
# MCPthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dMCP(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
#
sourceCpp(file = 'functions.cpp')
sourceCpp(file = 'R/functions.cpp')
sourceCpp(file = 'R/functions.cpp')
# dmean <- function(A){
#   a = colMeans(A)
#   A = t(t(A) - a)
#   return(A)
# }
# # 标准化
# standard=function(A){
#   a=colMeans(A)
#   b=apply(A,2,sd)
#   B=t(t(A)-a)
#   B=t(t(B)/b)
#   return(B)
# }
# # 将两个矩阵合并为一个块对角矩阵
# blockdiag=function(A,B){
#   if(length(A)>1){
#     p1=dim(A)[2];p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1:p1,1:p1]=A
#     C[c((p1+1):(p1+p2)),c((p1+1):(p1+p2))]=B
#   }else{
#     p1=1;
#     p2=dim(B)[2]
#     C=diag(p1+p2)
#     C[1,1]=A
#     C[c(2:(1+p2)),c(2:(1+p2))]=B
#   }
#   return(C)
# }
# # SCAD的阈值函数
# dSCAD=function(a,lam,gamma=3.7){
#   a=abs(a)
#   z=a
#   z[a<lam]=lam
#   z[a>lam]=(gamma*lam-z[a>lam])/(gamma-1)
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# dMCP=function(a,lam,gamma=3){
#   a=abs(a)
#   z=lam-a/gamma
#   z[a>(gamma*lam)]=0
#   return(z)
# }
# soft=function(a,b){
#   c=abs(a)-b
#   c[c<0]=0
#   c=c*sign(a)
#   return(c)
# }
# shrinking=function(A,eps){
#   d=eigen(A)$values
#   d1=min(d)
#   dp=max(d)
#   us=max(eps,(d1+dp)/2)
#   uf=sum((d-d1)^2)/sum(d-d1)
#   u=max(us,uf)
#   alpha=1-(eps-d1)/(u-d1)
#   B=alpha*as.matrix(A)+(1-alpha)*u*diag(ncol(A))
#   B=cov2cor(B)
#   S=list(est=B,alpha=alpha,u=u)
#   return(S)
# }
# SCADthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dSCAD(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
# MCPthreshold=function(S,lam,k=3){
#   a=as.vector(S)
#   b=abs(a)
#   for(i in 1:k){
#     c=dMCP(b,lam)
#     b=soft(b,c)
#   }
#   d=sign(a)*b
#   d=matrix(d,ncol(S),ncol(S))
#   diag(d)=1
#   d=shrinking(d,eps=0.001)
#   d=cov2cor(d$est)
#   return(d)
# }
#
sourceCpp(file = 'R/functions.cpp')
gc()
install.packages('BDregular')
remotes::install_github('https://github.com/stat618/BDregular')
install.packages('devtools')
remotes::install_github('https://github.com/stat618/BDregular')
